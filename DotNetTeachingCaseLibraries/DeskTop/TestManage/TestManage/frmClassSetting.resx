<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="ilistOpt.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="ilistOpt.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAAAA
        EgAAAk1TRnQBSQFMAgEBAwEAARABAAEQAQABFAEAARQBAAT/ASEBAAj/AUIBTQE2BwABNgMAASgDAAFQ
        AwABFAMAAQEBAAEgBgABGSoAAwgBCwIuAS0BRgFMAUkBQAF6AWcBYQFEAaIBcAFmAUQBqwFYAVQBQwGN
        AjsBNwFeAxYBHjAAAyABLgFNAUoBQQF8AYcBdwE8AcMBswGVASIB5wG8AZoBHAHtAZsBhQEyAdUBYwFd
        AUQBnAIzATEBTwMHAQosAAMIAQsCLgEtAUYBTAFJAUABegFnAWEBRAGiAXABZgFEAasBWAFUAUMBjQI7
        ATcBXgMWAR54AAMJAQwCOgE3AVwBrAGSASYB4wGzAZYBIAHoAZYBgwEzAdMBdgFsAUIBswFwAWYBRAGr
        AYkBegE6AccBpwGNASsB3gHQAagBDAH5AWABWgFEAZkDFgEeIAADFgEfAWkBYAFEAaMBwwGhARMB8wGd
        AYYBMAHWAWcBYAFDAaIBSQFHAT8BdQFDAUIBPQFsAVgBVAFDAYwBhwF4ATsBxQG2AZgBHwHqAaABiwEu
        AdoDKAE8AwQBBhwAAwkBDAI6ATcBXAGsAZIBJgHjAbMBlgEgAegBlgGDATMB0wF2AWwBQgGzAXABZgFE
        AasBiQF6AToBxwGnAY0BKwHeAdABqAEMAfkBYAFaAUQBmQMWAR5sAAMKAQ4BfgFyAT8BvAHaAa4BAgH/
        AUIBQAE7AWkDFQEdAwYBCAgAAwMBBAMOARMCJwEmAToBgwF2ATwBwgG0AZcBHwHpATQBMwEyAVAYAAIr
        ASoBQQGxAZQBJAHmAZUBgQEzAdEDKAE8AwoBDQMAAQEMAAMEAQUDFgEeAVYBUgFDAYkB0AGnAQoB+gFY
        AVQBQwGMGAADCgEOAX4BcgE/AbwB2gGuAQIB/wFCAUABOwFpAxUBHQMGAQgIAAMDAQQDDgETAicBJgE6
        AYMBdgE8AcIBtAGXAR8B6QE0ATMBMgFQZAADEAEWAZQBgQE2Ac8BggF1AT4BvwMWAR4gAAMIAQsBUAFN
        AUIBgAG2AZgBHwHqATcBNgE0AVUDAAEBDAADJAE1AboBmgEeAewBYAFaAUQBmSgAAjMBMQFPAbMBlgEi
        AecBWAFUAUMBjQMEAQYMAAMQARYBkgGBATYBzwGDAXQBPAHAAxYBHiAAAwgBCwFQAU0BQgGAAbYBmAEf
        AeoBNwE2ATQBVQMAAQFcAAF0AWsBQgGxAaMBigEtAdsDBAEGEAADCgEOAxIBGAMDAQQQAAFNAUoBQQF8
        Ab0BmgEaAe4DGAEiCAADBgEIAbkBmgEeAewBZwFgAUUBoTAAATIBMQEwAU0B0gGnAQgB+wIqASkBPwwA
        AXQBawFCAbEBowGKAS0B2wMEAQYsAAFNAUoBQQF8Ab0BmgEaAe4DGAEiWAABOAE3ATUBWAG8AZoBHAHt
        Ax8BLRQAAV8BWgFEAZcB0QGqAQYB/AMeASsQAAMEAQYBdgFrAUIBsgFyAWkBQgGwCAABUQFOAUIBggGq
        AZEBJwHhAxABFggAAwQBBgE8ATsBOAFfAwUBBwwAAxIBGQEsAisBQgwAAVABTQFCAYEBpgGNASkB3wMI
        AQsEAAE4ATcBNQFYAbwBmgEcAe0DHwEtCAADDAEQAwABASAAAwQBBgF2AWsBQgGyAXIBaQFCAbBYAAF3
        AWwBQgG0AW0BZAFEAagDAAEBFAABYAFaAUQBmQHaAa4BAgH/Ax4BKxQAAR4CHQEqAccBoAESAfUCIQEg
        AS8EAAGSAYEBNgHPAUwBSQFAAXoMAAFXAVMBQwGMAdEBqgEGAfwBSQFHAT8BdQMEAQYEAAMSARkBmgGG
        ATMB1AHVAawBBgH9AiIBIQExCAADFQEdAbMBlQEfAekBOAE3ATUBVwQAAXcBbAFCAbQBbQFkAUQBqAMA
        AQEIAAF8AW8BPwG6AxUBHQMaASQDAQECHAABHgIdASoBxwGgARIB9QIhASABL1QAAa4BkQEmAeQDIwEz
        GAABYAFaAUQBmAHaAa4BAgH/Ax4BKxQAAwgBCwGdAYYBMAHWAUoBSAFAAXcCIgEhATEBvQGaARoB7gML
        AQ8MAAMaASUBrAGSASYB4wHRAaoBBgH8AVIBTwFDAYQEAAGPAX4BOQHLAdQBqwEGAf0BTAFKAUEBewMG
        AQgIAAMBAQIBgQFzAT4BvQFtAWQBRAGoBAABrgGRASYB5AMjATMMAAMMARABSQFHAUABdgG+AZwBFwHw
        AUYBRAE+AXAcAAMIAQsBnQGGATAB1gFKAUgBQAF3UAACKwEqAUEBsgGUASQB5gMBAQIIAAMjATMCMAEv
        AUoCMAEvAUoCMAEvAUoBdgFsAUEBswHaAa4BAgH/AUABPwE6AWYCMAEvAUoCMAEvAUoCLQEsAUQMAAFs
        AWUBQwGpAXgBbQFBAbUBbAFkAUMBpwGPAX4BOAHLFAADGgEkAZ0BhwEwAdgBzAGkAQ4B+AGdAYcBLwHX
        AdABqAEKAfoBWQFUAUQBjgMFAQcQAAFOAUwBQQF+AawBkgEmAeMCKwEqAUEBsgGUASQB5gMBAQIMAAMN
        AREBlwGDATMB0gHaAa4BAgH/AcoBpQEQAfcBRAFCAT0BbAMEAQYYAAFtAWQBRAGoAXgBbQFBAbVQAAFM
        AUoBQQF7AZUBgQEzAdEMAAF+AXIBPwG8AdoBrgECAf8B2gGuAQIB/wHaAa4BAgH/AdoBrgECAf8B2gGu
        AQIB/wHaAa4BAgH/AdoBrgECAf8B2gGuAQIB/wG9AZoBGgHuDAABVAFQAUIBhwGVAYEBMwHRAbQBlwEf
        AekBdAFrAUMBsRgAAw4BEwHOAaQBDgH4AdoBrgECAf8BZAFeAUQBnhgAAToBOQE2AVsB1gGqAQQB/gFM
        AUoBQQF7AZcBgQEzAdIUAAMQARUBqgGRASgB4QHaAa4BAgH/AdoBrgECAf8BSwFJAUABeBgAAVQBUAFC
        AYcBlQGBATMB0VAAAUMBQgE9AWwBnQGHATAB2AwAAi4BLQFHAUIBQAE7AWkBQgFAATsBaQFBAUABOwFo
        AYcBdwE8AcMB2gGuAQIB/wFQAU0BQgGBAUIBQAE7AWkBQgFAATsBaQE8ATsBOAFfDAABWgFWAUQBkAGP
        AX4BOAHLAZ0BhwEwAdgBegFvAUEBtxQAAxABFQGJAXkBOgHGAdABqAEKAfoBtgGYAR8B6gHKAaUBEAH3
        AVABTQFCAYEDBAEFEAABPwE+AToBZAHKAaYBEAH3AUMBQgE9AWwBnQGHATAB2BgAAxYBHwGFAXYBPAHC
        AdoBrgECAf8B0QGmAQgB+wFaAVYBRAGQAwQBBRAAAVoBVgFEAZABjwF+ATgBy1AAAxsBJgG5AZkBIAHr
        AwcBChgAAV8BWgFEAZcB2gGuAQIB/wEeAh0BKhcAAQEBfAFxAT8BugFpAWABRAGjAVEBTgFCAYIBnQGH
        ATAB2AMAAQEMAAMRARcBjwF+ATgBywHWAaoBBAH+AVoBVgFEAZADCgENAaMBigErAdwB0gGnAQgB+wFE
        AUIBPQFtAwQBBgwAAVsBVgFEAZEBlgGDATMB0wMbASYBuQGZASAB6wMHAQoYAAMSARkBnQGHAS8B1wHL
        AaYBEAH3AVoBVgFEAZACNQEzAVMDBAEGCwABAQF8AXEBPwG6AWkBYAFEAaNUAAGdAYYBLwHXAjcBNAFW
        GAABYAFaAUQBmQHaAa4BAgH/Ax4BKxQAAw8BFAGpAZABKgHgAT4BPQE5AWMDCwEPAbYBmAEfAeoDHQEp
        DAABZAFeAUQBngHWAaoBBAH+AVMBUAFDAYUDBgEIBAADHQEpAbYBlwEeAekB0gGmAQgB+wMfAS0IAAMH
        AQkBlAGBATYBzwFXAVMBQwGLBAABnQGGAS8B1wE4ATcBNQFXHAADCgEOAi8BLgFIAXMBaAFCAa8B0QGq
        AQYB/AIrASoBQQgAAw8BFAGpAZABKgHgAT4BPQE5AWNUAAFiAVwBRQGaAYsBewE5AcgDBwEJFAABYgFc
        AUUBmgHaAa4BAgH/Ax8BLBQAATIBMQEwAU0BvQGaARoB7gMSARgEAAF8AXEBPwG6AWoBYwFEAaYDAgED
        CAADDwEUAUkBRwE/AXUDBgEIDAADGwEmAi0BLAFEDAADIgEyAcMBoQETAfMDJgE4BAABYgFcAUUBmgGL
        AXsBOQHIAwcBCRwAAwoBDQFkAV4BRAGeAWABWgFEAZkDCgENCAABMgExATABTQG9AZoBGgHuAxIBGFQA
        AR4CHQEqAdEBqgEGAfwCLgEtAUcUAAMfASwCMAEvAUoDCQEMEAADCgENAcIBoAEXAfEBSAFGAT8BdAgA
        AToBOQE2AVsBwwGhARMB8wMcASc0AAGJAXkBOgHGAXkBbQFAAbYIAAEeAh0BKgHRAaoBBgH8Ai4BLQFH
        MAADCgENAcIBoAEXAfEBSAFGAT8BdFwAAUIBQAE7AWkBtgGYAR8B6gIuAS0BRigAAwEBAgF4AW0BQAG2
        AY8BfwE2Ac0DDAEQCAADAwEEAWcBYAFFAaEBnQGHAS8B1wMbASYsAAFaAVUBRAGPAbYBlwEeAekDGgEl
        DAABQgFAATsBaQG2AZgBHwHqAi4BLQFGKAADAQECAXgBbQFAAbYBjwF/ATYBzQMMARBcAAMEAQUBYwFd
        AUQBmwG2AZcBHwHpAjUBMwFTAwkBDBgAAwEBAgMfAS0BlwGDATMB0gGdAYYBMAHWAxIBGBAAAw0BEgGJ
        AXkBOwHGAZ0BhgEwAdYDGwEmAwMBBBwAAw8BFAFdAVkBRAGUAbwBnAEYAe8BMgExATABTRAAAwQBBQFj
        AV0BRAGbAbYBlwEfAekCNQEzAVMDCQEMGAADAQECAx8BLQGXAYMBMwHSAZ0BhgEwAdYDEgEYZAADBAEF
        Aj0BOQFhAdYBqgEEAf4BlAGBATYBzwFCAUABOwFpAxIBGAgAAwcBCQIrASoBQQFyAWkBQgGuAb0BmgEa
        Ae4BdAFpAUIBsQMSARkYAAMNARIBZwFhAUMBogHDAaABFQHyAWoBYwFEAaYDHgErAwABAQwAAwoBDgFH
        AUUBPgFyAakBkAEqAeABvgGcARcB8AMpAT4YAAMEAQUBPQE8ATkBYAHWAaoBBAH+AZQBgQE2Ac8BQgFA
        ATsBaQMSARgIAAMHAQkCKwEqAUEBcgFpAUIBrgG9AZoBGgHuAXQBaQFCAbEDEgEZcAADGgEkAVsBVgFE
        AZEBkAF9ATcBzAG5AZgBIAHrAawBkgEmAeMBpwGNASsB3gG2AZgBHwHqAaMBigErAdwBcgFpAUIBsAE1
        ATQBMgFSJAADBAEFAToBOQE2AVsBfAFxAUABuwG0AZcBHwHpAZ0BhwEwAdgBegFvAUEBtwFyAWgBQgGv
        AY4BfQE5AckBtgGYAR8B6gGVAYEBMwHRAVYBUwFDAYoDCwEPJAADGgEkAVsBVgFEAZEBkAF9ATcBzAG5
        AZgBIAHrAawBkgEmAeMBpwGNASsB3gG2AZgBHwHqAaMBigErAdwBcgFpAUIBsAE1ATQBMgFShAADCgEO
        ASwCKwFCAjQBMgFRAxgBIjwAAwoBDgFSAU4BQwGDAaIBigEtAdsBvAGcARgB7wFyAWkBQgGuAicBJgE6
        PAADCgEOASwCKwFCAjQBMgFRAxgBInAAAUIBTQE+BwABPgMAASgDAAFQAwABFAMAAQEBAAEBBQAB8BcA
        A/8BAAH8AQMB/wHAAR8B/AEDAfAEAAHwAQAB/wEAAQcB8AEAAfAEAAHgAWABfgIHAeABYAFwBAABwwH8
        ARwBfwHhAcMB/AEQBAABxwGPARgB/wHxAccB/wEQBAACjwEYAccBOAGMAf8BEAQAAo8BiQHCARgBjAE/
        AYAEAAGfAY8BgQHCARgBnAE/AYAEAAEYAQEBwwHgATwBHAEPAcAEAAE4AQEBwwHwAfwBPgEPAcAEAAE4
        AQEBwwHgATwBPwEDAcAEAAEfAY8BgQHAARwBHwGBAYAEAAGfAY8BgQHCARgBnwHBAYAEAAKPAYgBxwE4
        AY8B4QGABAACjwEYAf8B+QGPAf8BEAQAAccB/gEYAX8B8QHHAf4BEAQAAcEB+AE8AR8BwwHBAfgBMAQA
        AeABYAF+AgcB4AFgAXAEAAH4AQEB/wEAAQ8B+AEBAfAEAAH/AQ8B/wHgAX8B/wEPAfAEAAs=
</value>
  </data>
</root>
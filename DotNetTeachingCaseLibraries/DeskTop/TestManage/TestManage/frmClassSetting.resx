<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="ilistOpt.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="ilistOpt.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAAA6
        EAAAAk1TRnQBSQFMAgEBAwEAASgBAAEoAQABFAEAARQBAAT/ASEBAAj/AUIBTQE2BwABNgMAASgDAAFQ
        AwABFAMAAQEBAAEgBgABGSoAAwgBCwMtAUYDRAF6AlIBUAGiAVcBVgFSAasDSgGNAzgBXgMWAR4wAAMg
        AS4CRQFEAXwBYwFfAVMBwwGQAX8BPwHnAZwBhgEzAe0BdAFsAU8B1QJRAU8BnAMxAU8DBwEKLAADCAEL
        Ay0BRgNEAXoCUgFQAaIBVwFWAVIBqwNKAY0DOAFeAxYBHngAAwkBDAM4AVwBhQF4AUMB4wGPAX4BOgHo
        AW8BagFOAdMBWwFYAVMBswFXAVYBUgGrAWUBYQFRAccBfgFyAUgB3gG+AZwBGAH5A04BmQMWAR4gAAMW
        AR8CUwFQAaMBqgGRASUB8wF2AW0BTQHWAlIBUAGiA0IBdQI/AT4BbAFLAkoBjAFkAWABVAHFAZIBgQE5
        AeoBeAFyAUoB2gMoATwDBAEGHAADCQEMAzgBXAGFAXgBQwHjAY8BfgE6AegBbwFqAU4B0wFbAVgBUwGz
        AVcBVgFSAasBZQFhAVEBxwF+AXIBSAHeAb4BnAEYAfkDTgGZAxYBHmwAAwoBDgFeAVsBUwG8AdoBrgEA
        Af8DPQFpAxUBHQMGAQgIAAMDAQQDDgETAycBOgFhAV4BUgHCAZIBgAE6AekDMgFQGAADKgFBAYwBfAE/
        AeYBbwFqAVAB0QMoATwDCgENAwABAQwAAwQBBQMWAR4CSgFJAYkBwgGhARMB+gFLAkoBjBgAAwoBDgFe
        AVsBUwG8AdoBrgEAAf8DPQFpAxUBHQMGAQgIAAMDAQQDDgETAycBOgFhAV4BUgHCAZIBgAE6AekDMgFQ
        ZAADEAEWAW4BaAFSAc8BYAFeAVQBvwMWAR4gAAMIAQsCRwFGAYABkgGBATkB6gI1ATQBVQMAAQEMAAMk
        ATUBmQGHATYB7ANOAZkoAAMxAU8BkAF/AT8B5wNKAY0DBAEGDAADEAEWAW4BaAFSAc8BYgFeAVMBwAMW
        AR4gAAMIAQsCRwFGAYABkgGBATkB6gI1ATQBVQMAAQFcAAFaAVcBUwGxAXsBcQFLAdsDBAEGEAADCgEO
        AxIBGAMDAQQQAAJFAUQBfAGcAYcBMAHuAxgBIggAAwYBCAGYAYcBNgHsAlIBUQGhMAACMQEwAU0BxwGd
        AQ4B+wMpAT8MAAFaAVcBUwGxAXsBcQFLAdsDBAEGLAACRQFEAXwBnAGHATAB7gMYASJYAAI2ATUBWAGc
        AYYBMwHtAx8BLRQAAk8BTgGXAcgBoQEJAfwDHgErEAADBAEGAVsBWQFTAbIBWAFWAVIBsAgAA0cBggGD
        AXcBRAHhAxABFggAAwQBBgM5AV8DBQEHDAADEgEZAysBQgwAAkcBRgGBAX0BcwFEAd8DCAELBAACNgE1
        AVgBnAGGATMB7QMfAS0IAAMMARADAAEBIAADBAEGAVsBWQFTAbIBWAFWAVIBsFgAAVoBWQFSAbQBVgFV
        AVABqAMAAQEUAANOAZkB2gGuAQAB/wMeASsUAAMdASoBsQGSAR8B9QMgAS8EAAFuAWgBUgHPA0QBegwA
        AUsCSgGMAcgBoQEJAfwDQgF1AwQBBgQAAxIBGQFyAW0BTwHUAcwBqQEJAf0CIgEhATEIAAMVAR0BkgGA
        AToB6QM1AVcEAAFaAVkBUgG0AVYBVQFQAagDAAEBCAABXQFbAVMBugMVAR0DGgEkAwEBAhwAAx0BKgGx
        AZIBHwH1AyABL1QAAYkBegFBAeQDIwEzGAACTwFOAZgB2gGuAQAB/wMeASsUAAMIAQsBdgFtAU0B1gND
        AXcCIgEhATEBnAGHATAB7gMLAQ8MAAMaASUBhQF4AUMB4wHIAaEBCQH8A0gBhAQAAWsBZAFSAssBqAEJ
        Af0DRAF7AwYBCAgAAwEBAgFgAV0BVAG9AVYBVQFQAagEAAGJAXoBQQHkAyMBMwwAAwwBEANCAXYBoAGK
        ASwB8ANAAXAcAAMIAQsBdgFtAU0B1gNDAXdQAAMqAUEBjQF8AT8B5gMBAQIIAAMjATMDLwFKAy8BSgMv
        AUoBWwFYAVMBswHaAa4BAAH/AzwBZgMvAUoDLwFKAywBRAwAAVYBVQFRAakBWwFZAVMBtQFWAVQBUQGn
        AWsBZAFSAcsUAAMaASQBdgFtAUsB2AG7AZsBGgH4AXQBbgFMAdcBwgGiARMB+gFMAksBjgMFAQcQAAJG
        AUUBfgGFAXgBQwHjAyoBQQGNAXwBPwHmAwEBAgwAAw0BEQFwAWkBTgHSAdoBrgEAAf8BuQGbARwB9wI/
        AT4BbAMEAQYYAAFWAVUBUAGoAVsBWQFTAbVQAANEAXsBbwFqAVAB0QwAAV4BWwFTAbwB2gGuAQAB/wHa
        Aa4BAAH/AdoBrgEAAf8B2gGuAQAB/wHaAa4BAAH/AdoBrgEAAf8B2gGuAQAB/wHaAa4BAAH/AZwBhwEw
        Ae4MAAJJAUgBhwFvAWoBUAHRAZIBgAE6AekBWgFXAVMBsRgAAw4BEwG9AZsBGgH4AdoBrgEAAf8CUQFP
        AZ4YAAM3AVsB0AGkAQQB/gNEAXsBcAFoAU4B0hQAAxABFQGDAXcBRAHhAdoBrgEAAf8B2gGuAQAB/wND
        AXgYAAJJAUgBhwFvAWoBUAHRUAACPwE+AWwBdgFtAUsB2AwAAy4BRwM9AWkDPQFpAj0BPAFoAWMBXwFT
        AcMB2gGuAQAB/wJHAUYBgQM9AWkDPQFpAzkBXwwAAkwBSwGQAWsBZAFSAcsBdgFtAUsB2AFdAVoBVQG3
        FAADEAEVAWYBYAFTAcYBwgGiARMB+gGSAYEBOQHqAbkBmwEcAfcCRwFGAYEDBAEFEAADOwFkAbkBnQEc
        AfcCPwE+AWwBdgFtAUsB2BgAAxYBHwFhAV4BUgHCAdoBrgEAAf8BxgGcAQ4B+wJMAUsBkAMEAQUQAAJM
        AUsBkAFrAWQBUgHLUAADGwEmAZgBhQE5AesDBwEKGAACTwFOAZcB2gGuAQAB/wMdASoXAAEBAV0BWwFT
        AboCUwFQAaMDRwGCAXYBbQFLAdgDAAEBDAADEQEXAWsBZAFSAcsB0AGkAQQB/gJMAUsBkAMKAQ0BfQFz
        AUgB3AHHAZ0BDgH7Az8BbQMEAQYMAAJNAUwBkQFvAWoBTgHTAxsBJgGYAYUBOQHrAwcBChgAAxIBGQF0
        AW4BTAHXAbsBnQEcAfcCTAFLAZADMwFTAwQBBgsAAQEBXQFbAVMBugJTAVABo1QAAXQBbgFMAdcDNQFW
        GAADTgGZAdoBrgEAAf8DHgErFAADDwEUAYMBeAFGAeADOwFjAwsBDwGSAYEBOQHqAx0BKQwAAlEBTwGe
        AdABpAEEAf4DSAGFAwYBCAQAAx0BKQGTAYABOgHpAccBnAEOAfsDHwEtCAADBwEJAW4BaAFSAc8DSgGL
        BAABdAFuAUwB1wM1AVccAAMKAQ4DLgFIAlgBUgGvAcgBoQEJAfwDKgFBCAADDwEUAYMBeAFGAeADOwFj
        VAABUQFQAU8BmgFnAWMBVAHIAwcBCRQAAVEBUAFPAZoB2gGuAQAB/wMfASwUAAIxATABTQGcAYcBMAHu
        AxIBGAQAAV0BWwFTAboBVQFUAVEBpgMCAQMIAAMPARQDQgF1AwYBCAwAAxsBJgMsAUQMAAMiATIBqgGR
        ASUB8wMmATgEAAFRAVABTwGaAWcBYwFUAcgDBwEJHAADCgENAlEBTwGeA04BmQMKAQ0IAAIxATABTQGc
        AYcBMAHuAxIBGFQAAx0BKgHIAaEBCQH8Ay4BRxQAAx8BLAMvAUoDCQEMEAADCgENAaYBkAEtAfEDQgF0
        CAADNwFbAaoBkQElAfMDHAEnNAABZgFgAVMBxgFbAVkBUwG2CAADHQEqAcgBoQEJAfwDLgFHMAADCgEN
        AaYBkAEtAfEDQgF0XAADPQFpAZIBgQE5AeoDLQFGKAADAQECAVsBWQFTAbYBagFkAVABzQMMARAIAAMD
        AQQCUgFRAaEBdAFuAUwB1wMbASYsAAJMAUsBjwGTAYABOgHpAxoBJQwAAz0BaQGSAYEBOQHqAy0BRigA
        AwEBAgFbAVkBUwG2AWoBZAFQAc0DDAEQXAADBAEFAlEBTwGbAZMBgAE6AekDMwFTAwkBDBgAAwEBAgMf
        AS0BcAFpAU4B0gF2AW0BTQHWAxIBGBAAAw0BEgFmAWABUwHGAXYBbQFNAdYDGwEmAwMBBBwAAw8BFAJO
        AU0BlAGfAYgBLgHvAjEBMAFNEAADBAEFAlEBTwGbAZMBgAE6AekDMwFTAwkBDBgAAwEBAgMfAS0BcAFp
        AU4B0gF2AW0BTQHWAxIBGGQAAwQBBQM6AWEB0AGkAQQB/gFuAWgBUgHPAz0BaQMSARgIAAMHAQkDKgFB
        AVkBVwFSAa4BnAGHATAB7gFaAVcBUwGxAxIBGRgAAw0BEgJSAVABogGqAY8BKQHyAVUBVAFRAaYDHgEr
        AwABAQwAAwoBDgNBAXIBgwF4AUYB4AGgAYoBLAHwAykBPhgAAwQBBQI6ATkBYAHQAaQBBAH+AW4BaAFS
        Ac8DPQFpAxIBGAgAAwcBCQMqAUEBWQFXAVIBrgGcAYcBMAHuAVoBVwFTAbEDEgEZcAADGgEkAk0BTAGR
        AWkBZAFSAcwBmAGEATkB6wGFAXgBQwHjAX4BcgFIAd4BkgGBATkB6gF9AXMBSAHcAVgBVgFSAbADMwFS
        JAADBAEFAzcBWwFeAVwBVAG7AZIBgAE6AekBdgFtAUsB2AFdAVoBVQG3AlgBUgGvAWkBZQFTAckBkgGB
        ATkB6gFvAWoBUAHRA0oBigMLAQ8kAAMaASQCTQFMAZEBaQFkAVIBzAGYAYQBOQHrAYUBeAFDAeMBfgFy
        AUgB3gGSAYEBOQHqAX0BcwFIAdwBWAFWAVIBsAMzAVKEAAMKAQ4DKwFCAzIBUQMYASI8AAMKAQ4CSAFH
        AYMBewFxAUsB2wGfAYgBLgHvAVkBVwFSAa4DJwE6PAADCgEOAysBQgMyAVEDGAEicAABQgFNAT4HAAE+
        AwABKAMAAVADAAEUAwABAQEAAQEFAAHwFwAD/wEAAfwBAwH/AcABHwH8AQMB8AQAAfABAAH/AQABBwHw
        AQAB8AQAAeABYAF+AgcB4AFgAXAEAAHDAfwBHAF/AeEBwwH8ARAEAAHHAY8BGAH/AfEBxwH/ARAEAAKP
        ARgBxwE4AYwB/wEQBAACjwGJAcIBGAGMAT8BgAQAAZ8BjwGBAcIBGAGcAT8BgAQAARgBAQHDAeABPAEc
        AQ8BwAQAATgBAQHDAfAB/AE+AQ8BwAQAATgBAQHDAeABPAE/AQMBwAQAAR8BjwGBAcABHAEfAYEBgAQA
        AZ8BjwGBAcIBGAGfAcEBgAQAAo8BiAHHATgBjwHhAYAEAAKPARgB/wH5AY8B/wEQBAABxwH+ARgBfwHx
        AccB/gEQBAABwQH4ATwBHwHDAcEB+AEwBAAB4AFgAX4CBwHgAWABcAQAAfgBAQH/AQABDwH4AQEB8AQA
        Af8BDwH/AeABfwH/AQ8B8AQACw==
</value>
  </data>
</root>
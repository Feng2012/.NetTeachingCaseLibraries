<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="ilistOpt.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="ilistOpt.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAAD+
        DwAAAk1TRnQBSQFMAgEBAwEAATABAAEwAQABFAEAARQBAAT/ASEBAAj/AUIBTQE2BwABNgMAASgDAAFQ
        AwABFAMAAQEBAAEgBgABGSoAAwgBCwMtAUYDRAF6A1EBogJWAVMBqwNKAY0DOAFeAxYBHjAAAyABLgJF
        AUQBfAFfAV0BVgHDAYgBeQFEAecBlQGCATgB7QFuAWcBVAHVAlEBTwGcAzEBTwMHAQosAAMIAQsDLQFG
        A0QBegNRAaICVgFTAasDSgGNAzgBXgMWAR54AAMJAQwDOAFcAX0BdAFJAeMBhwF6AUEB6AFqAWYBUwHT
        AVgBVwFUAbMCVgFTAasBYQFeAVMBxwF3AWwBTgHeAboBmAEaAfkDTgGZAxYBHiAAAxYBHwJSAVACowGM
        ASkB8wFvAWgBUgHWA1EBogNCAXUCPwE+AWwDSgGMAV8BXQFWAcUBigF7AT4B6gFyAW0BTwHaAygBPAME
        AQYcAAMJAQwDOAFcAX0BdAFJAeMBhwF6AUEB6AFqAWYBUwHTAVgBVwFUAbMCVgFTAasBYQFeAVMBxwF3
        AWwBTgHeAboBmAEaAfkDTgGZAxYBHmwAAwoBDgFbAVgBVAG8AdoBrgEAAf8DPQFpAxUBHQMGAQgIAAMD
        AQQDDgETAycBOgFdAVwBVAHCAYkBewFAAekDMgFQGAADKgFBAYQBeAFGAeYBagFmAVQB0QMoATwDCgEN
        AwABAQwAAwQBBQMWAR4CSgFJAYkBvQGfARYB+gNKAYwYAAMKAQ4BWwFYAVQBvAHaAa4BAAH/Az0BaQMV
        AR0DBgEICAADAwEEAw4BEwMnAToBXQFcAVQBwgGJAXsBQAHpAzIBUGQAAxABFgFoAWQBVgHPAV0BWwFW
        Ab8DFgEeIAADCAELAkcBRgGAAYoBewE+AeoCNQE0AVUDAAEBDAADJAE1AZIBggE8AewDTgGZKAADMQFP
        AYgBeQFEAecDSgGNAwQBBgwAAxABFgFoAWQBVgHPAV4BXAFVAcADFgEeIAADCAELAkcBRgGAAYoBewE+
        AeoCNQE0AVUDAAEBXAABVwFWAVUBsQF1AWsBUAHbAwQBBhAAAwoBDgMSARgDAwEEEAACRQFEAXwBlQGC
        ATYB7gMYASIIAAMGAQgBkQGCATwB7AJSAVEBoTAAAjEBMAFNAcQBmwEQAfsDKQE/DAABVwFWAVUBsQF1
        AWsBUAHbAwQBBiwAAkUBRAF8AZUBggE2Ae4DGAEiWAACNgE1AVgBlQGCATgB7QMfAS0UAAJPAU4BlwHF
        AZ4BCgH8Ax4BKxAAAwQBBgFZAVYBVAGyAVYBVQFTAbAIAANHAYIBfAFyAUkB4QMQARYIAAMEAQYDOQFf
        AwUBBwwAAxIBGQMrAUIMAAJHAUYBgQF1AW4BSgHfAwgBCwQAAjYBNQFYAZUBggE4Ae0DHwEtCAADDAEQ
        AwABASAAAwQBBgFZAVYBVAGyAVYBVQFTAbBYAAFYAVcBVAG0AVUBUwFSAagDAAEBFAADTgGZAdoBrgEA
        Af8DHgErFAADHQEqAaoBjQEkAfUDIAEvBAABaAFkAVYBzwNEAXoMAANKAYwBxQGeAQoB/ANCAXUDBAEG
        BAADEgEZAW0BaQFUAdQByQGoAQoB/QIiASEBMQgAAxUBHQGJAXsBQAHpAzUBVwQAAVgBVwFUAbQBVQFT
        AVIBqAMAAQEIAAFaAVkBVQG6AxUBHQMaASQDAQECHAADHQEqAaoBjQEkAfUDIAEvVAABgQF0AUYB5AMj
        ATMYAANOAZgB2gGuAQAB/wMeASsUAAMIAQsBbwFoAVIB1gNDAXcCIgEhATEBlQGCATYB7gMLAQ8MAAMa
        ASUBfQF0AUkB4wHFAZ4BCgH8A0gBhAQAAWQBYQFUAcsByAGoAQoB/QNEAXsDBgEICAADAQECAVwBWwFW
        Ab0BVQFTAVIBqAQAAYEBdAFGAeQDIwEzDAADDAEQA0IBdgGZAYYBMAHwA0ABcBwAAwgBCwFvAWgBUgHW
        A0MBd1AAAyoBQQGEAXgBRgHmAwEBAggAAyMBMwMvAUoDLwFKAy8BSgFYAVcBVAGzAdoBrgEAAf8DPAFm
        Ay8BSgMvAUoDLAFEDAABVQFTAVIBqQFZAVYBVAG1AVQBUgFRAacBZAFhAVQByxQAAxoBJAFwAWcBUQHY
        AbcBmQEdAfgBbgFpAVAB1wG9AaABFgH6A0sBjgMFAQcQAAJGAUUBfgF9AXQBSQHjAyoBQQGEAXgBRgHm
        AwEBAgwAAw0BEQFpAWQBUgHSAdoBrgEAAf8BswGXAR8B9wI/AT4BbAMEAQYYAAFVAVMBUgGoAVkBVgFU
        AbVQAANEAXsBagFmAVQB0QwAAVsBWAFUAbwB2gGuAQAB/wHaAa4BAAH/AdoBrgEAAf8B2gGuAQAB/wHa
        Aa4BAAH/AdoBrgEAAf8B2gGuAQAB/wHaAa4BAAH/AZUBggE2Ae4MAAJJAUgBhwFqAWYBVAHRAYkBewFA
        AekBVwFWAVUBsRgAAw4BEwG5AZkBHQH4AdoBrgEAAf8DUAGeGAADNwFbAc4BogEEAf4DRAF7AWkBZAFS
        AdIUAAMQARUBfAFyAUkB4QHaAa4BAAH/AdoBrgEAAf8DQwF4GAACSQFIAYcBagFmAVQB0VAAAj8BPgFs
        AXABZwFRAdgMAAMuAUcDPQFpAz0BaQI9ATwBaAFfAV0BVgHDAdoBrgEAAf8CRwFGAYEDPQFpAz0BaQM5
        AV8MAAJMAUsBkAFkAWEBVAHLAXABZwFRAdgBWgFZAVUBtxQAAxABFQFgAV4BVQHGAb0BoAEWAfoBigF7
        AT4B6gGzAZcBHwH3AkcBRgGBAwQBBRAAAzsBZAGzAZkBHwH3Aj8BPgFsAXABZwFRAdgYAAMWAR8BXQFc
        AVQBwgHaAa4BAAH/AcMBmgEQAfsCTAFLAZADBAEFEAACTAFLAZABZAFhAVQBy1AAAxsBJgGQAYEBQAHr
        AwcBChgAAk8BTgGXAdoBrgEAAf8DHQEqFwABAQFaAVkBVQG6AlIBUAGjA0cBggFwAWcBUQHYAwABAQwA
        AxEBFwFkAWEBVAHLAc4BogEEAf4CTAFLAZADCgENAXYBbQFNAdwBxAGbARAB+wM/AW0DBAEGDAACTQFM
        AZEBagFmAVMB0wMbASYBkAGBAUAB6wMHAQoYAAMSARkBbgFpAVAB1wG1AZkBHwH3AkwBSwGQAzMBUwME
        AQYLAAEBAVoBWQFVAboCUgFQAaNUAAFuAWkBUAHXAzUBVhgAA04BmQHaAa4BAAH/Ax4BKxQAAw8BFAF7
        AXMBTAHgAzsBYwMLAQ8BigF7AT4B6gMdASkMAANQAZ4BzgGiAQQB/gNIAYUDBgEIBAADHQEpAYoBewFA
        AekBxAGaARAB+wMfAS0IAAMHAQkBaAFkAVYBzwNKAYsEAAFuAWkBUAHXAzUBVxwAAwoBDgMuAUgCVgFT
        Aa8BxQGeAQoB/AMqAUEIAAMPARQBewFzAUwB4AM7AWNUAANQAZoBYwFgAVcByAMHAQkUAANQAZoB2gGu
        AQAB/wMfASwUAAIxATABTQGVAYIBNgHuAxIBGAQAAVoBWQFVAboCVAFSAaYDAgEDCAADDwEUA0IBdQMG
        AQgMAAMbASYDLAFEDAADIgEyAaMBjAEpAfMDJgE4BAADUAGaAWMBYAFXAcgDBwEJHAADCgENA1ABngNO
        AZkDCgENCAACMQEwAU0BlQGCATYB7gMSARhUAAMdASoBxQGeAQoB/AMuAUcUAAMfASwDLwFKAwkBDBAA
        AwoBDQGgAYsBMwHxA0IBdAgAAzcBWwGjAYwBKQHzAxwBJzQAAWABXgFVAcYCWAFUAbYIAAMdASoBxQGe
        AQoB/AMuAUcwAAMKAQ0BoAGLATMB8QNCAXRcAAM9AWkBigF7AT4B6gMtAUYoAAMBAQICWAFUAbYBZAFg
        AVQBzQMMARAIAAMDAQQCUgFRAaEBbgFpAVAB1wMbASYsAAJMAUsBjwGKAXsBQAHpAxoBJQwAAz0BaQGK
        AXsBPgHqAy0BRigAAwEBAgJYAVQBtgFkAWABVAHNAwwBEFwAAwQBBQJQAU8BmwGKAXsBQAHpAzMBUwMJ
        AQwYAAMBAQIDHwEtAWkBZAFSAdIBbwFoAVIB1gMSARgQAAMNARIBYAFeAVUBxgFvAWgBUgHWAxsBJgMD
        AQQcAAMPARQDTgGUAZcBgwEzAe8CMQEwAU0QAAMEAQUCUAFPAZsBigF7AUAB6QMzAVMDCQEMGAADAQEC
        Ax8BLQFpAWQBUgHSAW8BaAFSAdYDEgEYZAADBAEFAzoBYQHOAaIBBAH+AWgBZAFWAc8DPQFpAxIBGAgA
        AwcBCQMqAUEBVwFVAVMBrgGVAYIBNgHuAVcBVgFVAbEDEgEZGAADDQESA1ECogGLAS8B8gJUAVIBpgMe
        ASsDAAEBDAADCgEOA0EBcgF7AXMBTAHgAZkBhgEwAfADKQE+GAADBAEFAjoBOQFgAc4BogEEAf4BaAFk
        AVYBzwM9AWkDEgEYCAADBwEJAyoBQQFXAVUBUwGuAZUBggE2Ae4BVwFWAVUBsQMSARlwAAMaASQCTQFM
        AZEBZAFhAVYBzAGQAYABQAHrAX0BdAFJAeMBdwFsAU4B3gGKAXsBPgHqAXYBbQFNAdwBVgFVAVMBsAMz
        AVIkAAMEAQUDNwJbAVkBVgG7AYkBewFAAekBcAFnAVEB2AFaAVkBVQG3AlYBUwGvAWUBYgFWAckBigF7
        AT4B6gFqAWYBVAHRA0oBigMLAQ8kAAMaASQCTQFMAZEBZAFhAVYBzAGQAYABQAHrAX0BdAFJAeMBdwFs
        AU4B3gGKAXsBPgHqAXYBbQFNAdwBVgFVAVMBsAMzAVKEAAMKAQ4DKwFCAzIBUQMYASI8AAMKAQ4CSAFH
        AYMBdQFrAVAB2wGXAYMBMwHvAVcBVQFTAa4DJwE6PAADCgEOAysBQgMyAVEDGAEicAABQgFNAT4HAAE+
        AwABKAMAAVADAAEUAwABAQEAAQEFAAHwFwAD/wEAAfwBAwH/AcABHwH8AQMB8AQAAfABAAH/AQABBwHw
        AQAB8AQAAeABYAF+AgcB4AFgAXAEAAHDAfwBHAF/AeEBwwH8ARAEAAHHAY8BGAH/AfEBxwH/ARAEAAKP
        ARgBxwE4AYwB/wEQBAACjwGJAcIBGAGMAT8BgAQAAZ8BjwGBAcIBGAGcAT8BgAQAARgBAQHDAeABPAEc
        AQ8BwAQAATgBAQHDAfAB/AE+AQ8BwAQAATgBAQHDAeABPAE/AQMBwAQAAR8BjwGBAcABHAEfAYEBgAQA
        AZ8BjwGBAcIBGAGfAcEBgAQAAo8BiAHHATgBjwHhAYAEAAKPARgB/wH5AY8B/wEQBAABxwH+ARgBfwHx
        AccB/gEQBAABwQH4ATwBHwHDAcEB+AEwBAAB4AFgAX4CBwHgAWABcAQAAfgBAQH/AQABDwH4AQEB8AQA
        Af8BDwH/AeABfwH/AQ8B8AQACw==
</value>
  </data>
</root>